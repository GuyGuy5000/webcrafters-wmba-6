@using wmbaApp.ViewModels
@model wmbaApp.ViewModels.GameScoreKeepingVM

<div id="scoreKeepingMain" class="scoreKeepin">
        <div id="ScoreBar">
            <partial name="_ScoreBar" model="@Model" />
        </div>

        <div class="grid">
            <input id="btnUndoLast" type="button" value="Undo" onclick="UndoLastAction()" class="btn-action btn-outline-dark" />
            <div></div>
            <input id="btnAddToVisitorTeam" type="button" value="Add score" class="btn-action btn-outline-dark" />
        </div>
        <div id="BaseballDiamond">
            <partial name="_BaseballDiamond" model="@Model.Innings[Model.CurrentInning]" />
        </div>

        <div id="InningsTable">
            <partial name="_InningsTable" model="@Model" />
        </div>

        <input type="submit" value="CANCEL GAME" class="btn btn-outline-dark" onclick="openModal()" style="min-width: 110px; margin-bottom: 60px;" />

        <input type="hidden" id="undoLastPlayJSON" value='' />
    </div>


<!--popup modals-->
<partial name="_HomeLineUp" model="@((Lineup)ViewData["HomeLineUp"])" />
<partial name="_AwayLineUp" model="@((Lineup)ViewData["AwayLineUp"])" />
<div id="playByPlayPartial">
    <partial name="_PlayByPlay" model="@Model" />
</div>

<!--cancel game popup-->
<div id="customModal" class="modal">
    <div class="modal-content">
        <span class="close" id="close" onclick="closeModal()">X</span>
        <b><p id="notify" style="margin: 0 20px;">Canceling a game will reset the game and all data will be lost.<br><br>Cancel game?</br></p></b>
        <b><p id="required"></p></b>
        <i></i>


        <i id="error" class="fa-solid fa-xmark fa-f6"></i>
        <form asp-action="CancelGame">
            <input type="hidden" asp-for="GameID" />
            <input type="submit" value="CANCEL GAME" class="btn btn-outline-dark" style="min-width: 110px;" />
        </form>
    </div>
</div>

<style>
    .grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
    }

    .btn-action {
        color: #2e8b43;
        background-color: #fff;
        border-radius: 5px;
        border: 1px solid #2e8b43;
        display: block;
        font-size: 17px;
        font-weight: 600;
        height: 40px;
        margin: 0 auto;
        width: 170px;
    }

    .scoreKeepin {
        margin-top: -65px;
    }



    /* Tablet */
    @@media only screen and (min-width: 426px) and (max-width: 768px) {
        .btn-action {
            font-size: 13px;
            height: 30px;
            width: 130px;
        }
    }

    /* phone */
    @@media only screen and (min-width: 320px) and (max-width: 426px) {
        .btn-action {
            font-size: 10px;
            height: 27px;
            width: 105px;
        }
    }
</style>

@section Scripts{
    <script src="~/js/site.js"></script>
    <!--Postback ajax scripts-->
    <script type="text/javascript">

        $("#btnAddToVisitorTeam").click(function () {
            IncrementAwayTeamScore();
        });

        $("input[type='button']").each(function () {
            $(`#${this.id}`).click(function () {
                $('#scoreKeepingMain input').prop("disabled", true);
                new Promise(r => setTimeout(r, 3500)).then(function () {
                    $('#scoreKeepingMain input').prop("disabled", false); //re-enable buttons after updating the partial views
                })
            });
        });

        AssignClickEvents();

        //shows the batter action prompt
        function ShowBatterAction() {
            $('#batterActionPrompt').show();
            $('#stealPrompt').hide();
            $('#btnSkip').hide();
        }

        function HideBatterAction() {
            $('#batterActionPrompt').hide();
            $('#stealPrompt').show();
            $('#btnSkip').show();
        }

        //reassigns click events. Use when posting back and refreshing the partial view, or on first time load
        function AssignClickEvents() {
            //assigns click events to the player on base buttons
            $("button[name='playerOnBase']").each(function () {
                $(`#${this.id}`).click(function () {
                    HandlePlayerOnBase(this);
                });
            });

            //assigns click events to the steal prompt buttons
            $("button[name='stealPrompt']").each(function () {
                $(`#${this.id}`).click(function () {
                    HandleSteal(this);
                });
            });

            //assigns a click event to the batter submit button
            $("#batterActionSubmit").click(function () {
                HandleBatterAction();
            });

            //assigns a click event to the batter submit button
            $("#btnSkip").click(function () {
                SkipBatter();
            });
        }

        //handles any runners that are on base
        function HandlePlayerOnBase(sender) {
            //postback
            $.ajax({
                url: "@Url.Action("HandlePlayerOnBase", "ScoreKeeping")",
                data: { inningScoreKeepingJSON: $("#inningScoreKeepingJSON").val(), senderID: `${sender.id}`, senderAction: `${sender.value}` }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("Player on base action " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //handles the current batter's action
        function HandleBatterAction() {
            //postback
            $.ajax({
                url: "@Url.Action("HandleBatterAction", "ScoreKeeping")",
                data: { inningScoreKeepingJSON: $("#inningScoreKeepingJSON").val(), actionID: $("#BatterActionList").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("batter action" + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //handles a stolen base
        function HandleSteal(sender) {
            //postback
            $.ajax({
                url: "@Url.Action("HandleSteal", "ScoreKeeping")",
                data: { inningScoreKeepingJSON: $("#inningScoreKeepingJSON").val(), senderID: `${sender.id}` }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("batter action" + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //handles skipBatter
        function SkipBatter() {
            //postback
            $.ajax({
                url: "@Url.Action("SkipBatter", "ScoreKeeping")",
                data: { inningScoreKeepingJSON: $("#inningScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("batter action" + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //handles skipBatter
        function IncrementAwayTeamScore() {
            //postback
            $.ajax({
                url: "@Url.Action("IncrementAwayTeamScore", "ScoreKeeping")",
                data: { inningScoreKeepingJSON: $("#inningScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("add to visotor team" + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //Undoes the last action by refreshing the page with an older gameVM
        function UndoLastAction() {
            var undoJSON = $("#undoLastPlayJSON");
            if (undoJSON.val() == "" || undoJSON.val() == $("#gameScoreKeepingJSON").val()) { //if there is no undo primed
                alert(`Nothing to undo`);
                return;
            }

            $("#gameScoreKeepingJSON").val(undoJSON.val()); //sets the current JSON to the undoJSON so that UpdateGame() can use it\
            //postback
            $.ajax({
                url: "@Url.Action("UndoLastAction", "ScoreKeeping")",
                data: { undoGameJSON: undoJSON.val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    undoJSON.val("");
                    UpdateGame('');
                },
                error: function (result, status, err) {
                    window.alert("undo action" + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        //retrieves an updated JSON of the game and updates the hidden gameScoreKeepingJSON field then updates all partial views accordingly
        function UpdateGame(endInning) {
            $("#undoLastPlayJSON").val($("#gameScoreKeepingJSON").val()); //retains the current JSON for the undo feature
            var game = JSON.parse($("#gameScoreKeepingJSON").val());
            //postback
            $.ajax({
                url: "@Url.Action("UpdateGameScoreKeeping", "ScoreKeeping")",
                data: { gameJSON: $("#gameScoreKeepingJSON").val(), currentInningJSON: $("#inningScoreKeepingJSON").val(), endInning: endInning }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#gameScoreKeepingJSON").val(result); // set the div to the result of the postback
                    var updatedGame = JSON.parse(result);

                    if (updatedGame.currentInning > game.currentInning) {
                        StartNewInning();
                    }
                    else {
                        UpdateScorePartial();
                        UpdateInningsTablePartial();
                        UpdatePlayByPlayPartial();
                        AssignClickEvents();
                    }

                },
                error: function (result, status, err) {
                    window.alert("Update game " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        function StartNewInning() {
            //postback
            $.ajax({
                url: "@Url.Action("StartNewInning", "ScoreKeeping")",
                data: { gameScoreKeepingJSON: $("#gameScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#BaseballDiamond").html(""); //reset the div
                    $("#BaseballDiamond").html(result); // set the div to the result of the postback
                    UpdateScorePartial();
                    UpdateInningsTablePartial();
                    UpdatePlayByPlayPartial();
                    AssignClickEvents();
                },
                error: function (result, status, err) {
                    window.alert("Update new inning " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        function UpdateScorePartial() {
            //postback
            $.ajax({
                url: "@Url.Action("UpdateScorePartial", "ScoreKeeping")",
                data: { gameJSON: $("#gameScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#ScoreBar").html(""); //reset the div
                    $("#ScoreBar").html(result); // set the div to the result of the postback
                },
                error: function (result, status, err) {
                    window.alert("Update score " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        function UpdateInningsTablePartial() {
            //postback
            $.ajax({
                url: "@Url.Action("UpdateInningsTablePartial", "ScoreKeeping")",
                data: { gameJSON: $("#gameScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#InningsTable").html(""); //reset the div
                    $("#InningsTable").html(result); // set the div to the result of the postback
                },
                error: function (result, status, err) {
                    window.alert("Update innings " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

        function UpdatePlayByPlayPartial() {
            //postback
            $.ajax({
                url: "@Url.Action("UpdatePlayByPlayPartial", "ScoreKeeping")",
                data: { gameJSON: $("#gameScoreKeepingJSON").val() }, //dictionary with same keys as the method's params
                type: "Post",
                success: function (result) {
                    $("#playByPlayPartial").html(""); //reset the div
                    $("#playByPlayPartial").html(result); // set the div to the result of the postback
                },
                error: function (result, status, err) {
                    window.alert("Update play by play " + result.responseText + " " + status.responseText, err.Message);
                }
            });
        }

    </script>

    <script>

        GenerateContextHelp([
            "<p>The scorekeeping section includes a phone menu navigation bar that allows you to perform pitch actions during the game.</p>",
            "<p>You can also access icons to preview the away and home team lineups and view the play-by-play details during the game.</p>",
            "<p>It's important to note that canceling a game while it's being played will result in losing all data, and no player stats will be stored for that game.</p>",
            "<p>You have the option to skip a batter's turn and add a score to the defensive team by clicking on the 'Add Score' button.</p>",
            "<p>Once the game ends, you'll be shown a summary of the game.</p>",
            "<p>If you make a mistake or need to undo an action, you can use the 'Undo' button to revert the last action taken.</p>"
        ]);
    </script>
}